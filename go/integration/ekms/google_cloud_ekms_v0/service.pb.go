// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google_cloud_ekms_v0/service.proto

package google_cloud_ekms_v0

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("google_cloud_ekms_v0/service.proto", fileDescriptor_b72ef8e1b7d4ff7e) }

var fileDescriptor_b72ef8e1b7d4ff7e = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0xb1, 0x48, 0x87, 0x8c, 0x41, 0x44, 0xa2, 0x22, 0x4d, 0x9d, 0x32, 0xdc, 0x05, 0xdd,
	0x0a, 0x4e, 0x52, 0x1c, 0x44, 0x10, 0x45, 0x1c, 0xc3, 0x33, 0x7d, 0xa4, 0xa1, 0xd7, 0xbb, 0xf3,
	0xee, 0xe5, 0x6c, 0x10, 0x17, 0x77, 0x27, 0x3f, 0x9a, 0x5f, 0xc1, 0x0f, 0x22, 0x97, 0x8b, 0x53,
	0x43, 0xc7, 0xc7, 0xff, 0xc7, 0xff, 0xf7, 0xe7, 0x45, 0x69, 0xa5, 0x54, 0x25, 0xb0, 0x28, 0x85,
	0x6a, 0x16, 0x05, 0xae, 0xd6, 0xb6, 0x70, 0x39, 0xb7, 0x68, 0x5c, 0x5d, 0x22, 0xd3, 0x46, 0x91,
	0x8a, 0x0f, 0x02, 0xc3, 0x3a, 0x86, 0x79, 0x86, 0xb9, 0x3c, 0x99, 0x57, 0x35, 0x31, 0x42, 0xbb,
	0x40, 0xc7, 0x6a, 0xc5, 0x69, 0x09, 0x02, 0x6d, 0xa9, 0x85, 0x3f, 0x3c, 0xc3, 0x41, 0xd7, 0x96,
	0x0f, 0xd6, 0x53, 0xab, 0xd1, 0x86, 0xf2, 0xe4, 0x24, 0x10, 0x9e, 0xe6, 0x20, 0xa5, 0x22, 0xa0,
	0x5a, 0xc9, 0x3e, 0xbd, 0xf8, 0x1a, 0x45, 0x67, 0x37, 0xd7, 0xf7, 0xf3, 0x0d, 0xa1, 0x91, 0x20,
	0x6e, 0xb1, 0xbd, 0x03, 0x09, 0x15, 0xae, 0x51, 0xd2, 0x63, 0x18, 0x19, 0xeb, 0x68, 0xff, 0xd9,
	0x80, 0x8e, 0x27, 0x6c, 0x68, 0x27, 0xf3, 0xd9, 0x03, 0xbe, 0x36, 0x68, 0x29, 0x49, 0x77, 0x21,
	0x56, 0x2b, 0x69, 0x31, 0x9d, 0x7c, 0xfe, 0xfc, 0x7e, 0x8f, 0x8e, 0xd3, 0x43, 0xee, 0x72, 0xfe,
	0xbe, 0xc2, 0xb6, 0xd0, 0x40, 0xcb, 0xab, 0x2c, 0xfb, 0x98, 0xbd, 0x19, 0xd0, 0xb3, 0xbd, 0x2c,
	0xde, 0x44, 0xe3, 0x27, 0xe9, 0x8f, 0x78, 0x3a, 0x5c, 0x18, 0xd2, 0x7f, 0xeb, 0xf9, 0x6e, 0xa8,
	0xf7, 0x4e, 0x3b, 0xef, 0x69, 0x7a, 0xb4, 0xed, 0x6d, 0x64, 0x6f, 0x7e, 0x19, 0x77, 0x6f, 0xb9,
	0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x82, 0x80, 0xc4, 0x25, 0xb7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GCPExternalKeyManagementServiceClient is the client API for GCPExternalKeyManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GCPExternalKeyManagementServiceClient interface {
	// Wraps a plaintext IKEK with the EKEK named in the Request.
	Wrap(ctx context.Context, in *WrapRequest, opts ...grpc.CallOption) (*WrapResponse, error)
	// Unwraps a wrapped IKEK and returns the plaintext.
	Unwrap(ctx context.Context, in *UnwrapRequest, opts ...grpc.CallOption) (*UnwrapResponse, error)
}

type gCPExternalKeyManagementServiceClient struct {
	cc *grpc.ClientConn
}

func NewGCPExternalKeyManagementServiceClient(cc *grpc.ClientConn) GCPExternalKeyManagementServiceClient {
	return &gCPExternalKeyManagementServiceClient{cc}
}

func (c *gCPExternalKeyManagementServiceClient) Wrap(ctx context.Context, in *WrapRequest, opts ...grpc.CallOption) (*WrapResponse, error) {
	out := new(WrapResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Wrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gCPExternalKeyManagementServiceClient) Unwrap(ctx context.Context, in *UnwrapRequest, opts ...grpc.CallOption) (*UnwrapResponse, error) {
	out := new(UnwrapResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Unwrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GCPExternalKeyManagementServiceServer is the server API for GCPExternalKeyManagementService service.
type GCPExternalKeyManagementServiceServer interface {
	// Wraps a plaintext IKEK with the EKEK named in the Request.
	Wrap(context.Context, *WrapRequest) (*WrapResponse, error)
	// Unwraps a wrapped IKEK and returns the plaintext.
	Unwrap(context.Context, *UnwrapRequest) (*UnwrapResponse, error)
}

// UnimplementedGCPExternalKeyManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGCPExternalKeyManagementServiceServer struct {
}

func (*UnimplementedGCPExternalKeyManagementServiceServer) Wrap(ctx context.Context, req *WrapRequest) (*WrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wrap not implemented")
}
func (*UnimplementedGCPExternalKeyManagementServiceServer) Unwrap(ctx context.Context, req *UnwrapRequest) (*UnwrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unwrap not implemented")
}

func RegisterGCPExternalKeyManagementServiceServer(s *grpc.Server, srv GCPExternalKeyManagementServiceServer) {
	s.RegisterService(&_GCPExternalKeyManagementService_serviceDesc, srv)
}

func _GCPExternalKeyManagementService_Wrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCPExternalKeyManagementServiceServer).Wrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Wrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCPExternalKeyManagementServiceServer).Wrap(ctx, req.(*WrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GCPExternalKeyManagementService_Unwrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnwrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GCPExternalKeyManagementServiceServer).Unwrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.ekms.v0.GCPExternalKeyManagementService/Unwrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GCPExternalKeyManagementServiceServer).Unwrap(ctx, req.(*UnwrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GCPExternalKeyManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.ekms.v0.GCPExternalKeyManagementService",
	HandlerType: (*GCPExternalKeyManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Wrap",
			Handler:    _GCPExternalKeyManagementService_Wrap_Handler,
		},
		{
			MethodName: "Unwrap",
			Handler:    _GCPExternalKeyManagementService_Unwrap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google_cloud_ekms_v0/service.proto",
}
